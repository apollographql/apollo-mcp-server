name: Build Release Container
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build a container for x86_64 and aarch64 linux
  build:
    name: Release Container
    strategy:
      matrix:
        os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      fqdn: ${{ steps.repo-meta.outputs.fqdn }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # Extract needed info for use with the other steps
      - id: repo-meta
        name: Extract Metadata
        shell: bash
        run: |
          echo "fqdn=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "name=`basename ${{ github.repository }}`" >> $GITHUB_OUTPUT

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: ${{ env.nix_conf }}
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: build-${{ runner.os }}-${{ hashFiles('Cargo.lock', '**/Cargo.toml', 'flake.nix', 'flake.lock', 'rust-toolchain.toml') }}
          restore-prefixes-first-match: build-${{ runner.os }}-
          # We don't want to affect the cache when building the container
          purge: false
          save: false

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: builder
        name: Build Container
        shell: bash
        run: |
          nix run .#streamImage | docker image load
          echo "id=`docker image ls -q | head -n1`" >> $GITHUB_OUTPUT
          echo "arch=`docker image ls --format '{{ .Tag }}' | head -n1`" >> $GITHUB_OUTPUT

      - name: Tag the Container
        env:
          TAG: ${{ github.ref_name }}-${{ steps.builder.outputs.arch }}
        run: |
          docker image tag "${{ steps.builder.outputs.id }}" \
            "${{ steps.repo-meta.outputs.fqdn }}:$TAG"

      - name: Push the Container
        env:
          TAG: ${{ github.ref_name }}-${{ steps.builder.outputs.arch }}
        run: docker image push "${{ steps.repo-meta.outputs.fqdn }}:$TAG"

      - id: digest-meta
        name: Extract the digest
        shell: bash
        env:
          TAG: ${{ github.ref_name }}-${{ steps.builder.outputs.arch }}
        run: echo "digest=`docker manifest inspect ${{ steps.repo-meta.outputs.fqdn }}:$TAG --verbose | nix run nixpkgs#jq -- -r .Descriptor.digest`" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.repo-meta.outputs.fqdn }}
          subject-digest: ${{ steps.digest-meta.outputs.digest }}
          push-to-registry: true

  bundle:
    name: Bundle into multiarch container
    needs: build
    runs-on: ubuntu-24.04
    env:
      FQDN: ${{ needs.build.outputs.fqdn }}
      VERSION: ${{ github.ref_name }}
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create multiarch manifest
        run: |
          docker manifest create $FQDN:$VERSION $FQDN:$VERSION-amd64 $FQDN:$VERSION-arm64
          docker manifest annotate $FQDN:$VERSION $FQDN:$VERSION-amd64 --arch amd64
          docker manifest annotate $FQDN:$VERSION $FQDN:$VERSION-arm64 --arch arm64

          docker manifest create $FQDN:latest $FQDN:$VERSION-amd64 $FQDN:$VERSION-arm64
          docker manifest annotate $FQDN:latest $FQDN:$VERSION-amd64 --arch amd64
          docker manifest annotate $FQDN:latest $FQDN:$VERSION-arm64 --arch arm64
      - name: Push the multiarch manifests
        run: |
          docker manifest push $FQDN:$VERSION
          docker manifest push $FQDN:latest
