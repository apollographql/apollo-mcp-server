name: Sync main → develop

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      head_branch:
        description: "Branch to merge FROM (default: main)."
        required: false
        default: "main"
      base_branch:
        description: "Branch to merge INTO (default: develop)."
        required: false
        default: "develop"
      source_pr_number:
        description: "If testing, the PR number to comment on (optional)."
        required: false
      test_mode:
        description: "Bypass PR/push guards for manual testing"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: sync-main-into-develop
  cancel-in-progress: false

jobs:
  open-sync-pr:
    if: |
      github.actor != 'github-actions[bot]' && (
        (
            github.event_name == 'pull_request' && github.event.pull_request.merged == true
        ) || (
            github.event_name == 'workflow_dispatch' && (inputs.test_mode == 'true')
        )
      )
    runs-on: ubuntu-latest

    env:
      # Use inputs for dispatch (testing), defaults for normal triggers
      HEAD_BRANCH: ${{ (github.event_name == 'workflow_dispatch' && inputs.head_branch) || 'main' }}
      BASE_BRANCH: ${{ (github.event_name == 'workflow_dispatch' && inputs.base_branch) || 'develop' }}
      SOURCE_PR: ${{ (github.event_name == 'pull_request' && github.event.pull_request.number) || inputs.source_pr_number || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Configure git author
        run: |
          git config --local user.name "Apollo Bot"
          git config --local user.email "svc-apollo-bot-2@apollographql.com"

      # Generate branch name from PR# when available, otherwise use first 7 commit SHA characters
      - name: Compute branch/name metadata
        id: meta
        run: |
          if [ -n "${SOURCE_PR}" ]; then
            echo "branch=sync/${HEAD_BRANCH}-into-${BASE_BRANCH}-pr-${SOURCE_PR}" >> $GITHUB_OUTPUT
            echo "title=Sync ${HEAD_BRANCH} → ${BASE_BRANCH} (PR #${SOURCE_PR})" >> $GITHUB_OUTPUT
            echo "body=Auto-opened to merge \`${HEAD_BRANCH}\` into \`${BASE_BRANCH}\`. Source PR: #${SOURCE_PR}." >> $GITHUB_OUTPUT
          else
            short_sha=${GITHUB_SHA::7}
            echo "branch=sync/${HEAD_BRANCH}-into-${BASE_BRANCH}-${short_sha}" >> $GITHUB_OUTPUT
            echo "title=Sync ${HEAD_BRANCH} → ${BASE_BRANCH} (${short_sha})" >> $GITHUB_OUTPUT
            echo "body=Auto-opened to merge \`${HEAD_BRANCH}\` into \`${BASE_BRANCH}\` at \`${GITHUB_SHA}\`." >> $GITHUB_OUTPUT
          fi

      # Short-lived sync branch from develop and merge main into it (do NOT rebase)
      # use +e to stop errors from short-circuiting the script
      - name: Prepare sync branch
        id: prep
        run: |
          git fetch origin "${BASE_BRANCH}" "${HEAD_BRANCH}"
          git switch -c "${{ steps.meta.outputs.branch }}" "origin/${BASE_BRANCH}"
          set +e
          git merge --no-ff "origin/${HEAD_BRANCH}"
          rc=$?
          set -e
          git add -A || true
          git commit -m "WIP: merge ${HEAD_BRANCH} into ${BASE_BRANCH} via ${{ steps.meta.outputs.branch }}" || true
          git push origin HEAD
          echo "merge_status=$rc" >> "$GITHUB_OUTPUT"

      # Open the PR targeting develop
      - name: Open PR to develop
        id: syncpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT }}
          branch: ${{ steps.meta.outputs.branch }}
          base: ${{ env.BASE_BRANCH }}
          title: ${{ steps.meta.outputs.title }}
          body:  |
            ${{ steps.meta.outputs.body }}

            Merge status: ${{ steps.prep.outputs.merge_status == '0' && 'clean ✅' || 'conflicts ❗' }}
          labels: ${{ steps.prep.outputs.merge_status == '0' && 'back-merge,automation' || 'back-merge,automation,conflicts' }}

      # Comment back on the ORIGINAL merged PR with a link to the sync PR
      - name: Comment on source PR with sync PR link
        if: steps.syncpr.outputs.pull-request-url != '' && env.SOURCE_PR != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issue_number = Number(process.env.SOURCE_PR);
            const syncUrl = `${{ toJson(steps.syncpr.outputs['pull-request-url']) }}`.replace(/^"|"$/g, '');
            const body = `Opened sync PR **${process.env.HEAD_BRANCH} → ${process.env.BASE_BRANCH}**: ${syncUrl}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body,
            });
