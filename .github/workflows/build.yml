name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact-name: apollo-mcp-server-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact-name: apollo-mcp-server-linux-aarch64
          
          # macOS targets (native builds only)
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact-name: apollo-mcp-server-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact-name: apollo-mcp-server-macos-aarch64
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact-name: apollo-mcp-server-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross (for Linux cross-compilation)
      if: runner.os == 'Linux' && contains(matrix.target, 'linux')
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Add target (for native builds)
      if: runner.os != 'Linux' || !contains(matrix.target, 'linux')
      run: rustup target add ${{ matrix.target }}

    - name: Build
      run: |
        if [[ "${{ matrix.target }}" == *"linux"* && "${{ runner.os }}" == "Linux" ]]; then
          cross build --release --target ${{ matrix.target }} --package apollo-mcp-server
        else
          cargo build --release --target ${{ matrix.target }} --package apollo-mcp-server
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: target/${{ matrix.target }}/release/apollo-mcp-server*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create release archive
      run: |
        mkdir -p release
        for artifact in artifacts/*/; do
          artifact_name=$(basename "$artifact")
          if [[ "$artifact_name" == *".exe" ]]; then
            # Windows executable
            cp "$artifact"/*.exe "release/$artifact_name"
          else
            # Unix executable
            cp "$artifact"/* "release/$artifact_name"
            chmod +x "release/$artifact_name"
          fi
        done

    - name: Create checksums
      run: |
        cd release
        sha256sum * > checksums.txt

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        name: Release ${{ github.event.inputs.tag || github.ref_name }}
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
